// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/sepuka/focalism/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// TaskRepository is an autogenerated mock type for the TaskRepository type
type TaskRepository struct {
	mock.Mock
}

// Answer provides a mock function with given fields: task
func (_m TaskRepository) Answer(task domain.Task) error {
	ret := _m.Called(task)

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Task) error); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: vocabulary, peerId
func (_m TaskRepository) Create(vocabulary domain.Vocabulary, peerId int64) (*domain.Task, error) {
	ret := _m.Called(vocabulary, peerId)

	var r0 *domain.Task
	if rf, ok := ret.Get(0).(func(domain.Vocabulary, int64) *domain.Task); ok {
		r0 = rf(vocabulary, peerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain.Vocabulary, int64) error); ok {
		r1 = rf(vocabulary, peerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLast provides a mock function with given fields: peerId
func (_m TaskRepository) DeleteLast(peerId int64) error {
	ret := _m.Called(peerId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(peerId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetById provides a mock function with given fields: taskId
func (_m TaskRepository) GetById(taskId int64) (domain.Task, error) {
	ret := _m.Called(taskId)

	var r0 domain.Task
	if rf, ok := ret.Get(0).(func(int64) domain.Task); ok {
		r0 = rf(taskId)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(taskId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLast provides a mock function with given fields: peerId
func (_m TaskRepository) GetLast(peerId int64) (domain.Task, error) {
	ret := _m.Called(peerId)

	var r0 domain.Task
	if rf, ok := ret.Get(0).(func(int64) domain.Task); ok {
		r0 = rf(peerId)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(peerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTodayTasks provides a mock function with given fields: topicId, peerId
func (_m TaskRepository) GetTodayTasks(topicId int64, peerId int) (int, error) {
	ret := _m.Called(topicId, peerId)

	var r0 int
	if rf, ok := ret.Get(0).(func(int64, int) int); ok {
		r0 = rf(topicId, peerId)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int) error); ok {
		r1 = rf(topicId, peerId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
