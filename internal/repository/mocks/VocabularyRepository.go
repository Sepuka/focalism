// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/sepuka/focalism/internal/domain"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// VocabularyRepository is an autogenerated mock type for the VocabularyRepository type
type VocabularyRepository struct {
	mock.Mock
}

// FindActual provides a mock function with given fields: topicId, peerId, date
func (_m VocabularyRepository) FindActual(topicId int64, peerId int64, date time.Time) (domain.Vocabulary, error) {
	ret := _m.Called(topicId, peerId, date)

	var r0 domain.Vocabulary
	if rf, ok := ret.Get(0).(func(int64, int64, time.Time) domain.Vocabulary); ok {
		r0 = rf(topicId, peerId, date)
	} else {
		r0 = ret.Get(0).(domain.Vocabulary)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64, int64, time.Time) error); ok {
		r1 = rf(topicId, peerId, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotal provides a mock function with given fields: topicId
func (_m VocabularyRepository) GetTotal(topicId int64) (int, error) {
	ret := _m.Called(topicId)

	var r0 int
	if rf, ok := ret.Get(0).(func(int64) int); ok {
		r0 = rf(topicId)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(topicId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncrViews provides a mock function with given fields: _a0
func (_m VocabularyRepository) IncrViews(_a0 domain.Vocabulary) {
	_m.Called(_a0)
}
